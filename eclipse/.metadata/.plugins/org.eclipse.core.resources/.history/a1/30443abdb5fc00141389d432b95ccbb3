package io.github.theunlocked.auto_paths;

import io.github.theunlocked.auto_paths.lib.BlockVectorPoint;
import io.github.theunlocked.auto_paths.lib.References;

import java.util.HashMap;
import java.util.Map;
import java.util.Random;

import cpw.mods.fml.common.eventhandler.SubscribeEvent;
import cpw.mods.fml.common.network.NetworkRegistry;
import cpw.mods.fml.common.network.simpleimpl.SimpleNetworkWrapper;
import cpw.mods.fml.relauncher.Side;
import net.minecraft.block.Block;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.init.Blocks;
import net.minecraftforge.event.entity.living.LivingEvent.LivingUpdateEvent;

public class TrampleHandler {
	
	public static SimpleNetworkWrapper network;
	
	public static Map<Block, Block> blockSwitch = new HashMap<Block,Block>();
	static {
		blockSwitch.put(Blocks.grass, Blocks.dirt);
		blockSwitch.put(Blocks.sand, Blocks.sandstone);
	}
	
	public static void preInit(){
		network = NetworkRegistry.INSTANCE.newSimpleChannel(References.MODID);
	    network.registerMessage(BlockChanged.Handler.class, BlockChanged.class, 0, Side.SERVER);
	}
	
	@SubscribeEvent
	public void UpdatePlayer(LivingUpdateEvent event){
		if (event.entityLiving.worldObj.isRemote){
			double rand = Math.random();
			if (event.entityLiving instanceof EntityPlayer){
				EntityPlayer player = (EntityPlayer)event.entityLiving;
				if (player.isSneaking()){
					return;
				}
				else if (rand > (Math.abs(player.moveForward) >= 0.6 ? 0.95 / (Math.abs(player.moveForward) * 1.5) : 1) && player.onGround){
					trample(new BlockVectorPoint(event.entityLiving.worldObj, (int)(player.posX - 0.5d), (int)player.posY - 2, (int)(player.posZ - 0.5d)));
				}
				else if (rand > (Math.abs(player.moveStrafing) >= 0.6 ? 0.95 / (Math.abs(player.moveStrafing) * 1.5) : 1) && player.onGround){
					trample(new BlockVectorPoint(event.entityLiving.worldObj, (int)(player.posX - 0.5d), (int)player.posY - 2, (int)(player.posZ - 0.5d)));
				}
			}
		}
	}
	
	private void trample(BlockVectorPoint bvp){
		Block to = blockSwitch.get(bvp.getBlock(bvp));
		if (to != null && Math.random() > 0.9){
			network.sendToServer(new BlockChanged(bvp, to));
		}
	}
}
